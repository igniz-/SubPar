cmake_minimum_required(VERSION 3.5)

project(SubPar VERSION 1.0 LANGUAGES CXX)

set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

find_package(QT NAMES Qt6 Qt5 REQUIRED COMPONENTS Widgets)
find_package(Qt${QT_VERSION_MAJOR} REQUIRED COMPONENTS Widgets)
find_package(Qt${QT_VERSION_MAJOR} REQUIRED COMPONENTS Network)

set(TS_FILES SubPar_en_IE.ts)

set(PROJECT_SOURCES
        main.cpp
        mainwindow.cpp
        mainwindow.h
        mainwindow.ui
        assets.qrc
        optionsdialog.h optionsdialog.cpp optionsdialog.ui
        opensubtitlesapi.h opensubtitlesapi.cpp
        aboutdialog.h aboutdialog.cpp aboutdialog.ui

        filelistmodel.h filelistmodel.cpp
        qfileitem.h qfileitem.cpp
        qlistviewdrawdelegate.h qlistviewdrawdelegate.cpp
        listview.h listview.cpp
        ${TS_FILES}
)

if (WIN32)
    set(app_icon_resource "${CMAKE_CURRENT_SOURCE_DIR}/resources/app_icon.rc")
    qt_add_executable(SubPar
        MANUAL_FINALIZATION
        ${PROJECT_SOURCES}
        ${app_icon_resource}
    )
#    qt_create_translation(QM_FILES ${CMAKE_SOURCE_DIR} ${TS_FILES})
elseif (APPLE)
    # The MACOSX_BUNDLE_ICON_FILE variable is added to the Info.plist
    # generated by CMake. This variable contains the .icns file name,
    # without the path.
#    set(MACOSX_BUNDLE_ICON_FILE subpar.icns)

#    # And the following tells CMake where to find and install the file itself.
#    set(app_icon_resource "${CMAKE_CURRENT_SOURCE_DIR}/resources/subpar.icns")
#    set_source_files_properties(${app_icon_resource} PROPERTIES
#           MACOSX_PACKAGE_LOCATION "Resources")

#    qt_add_executable(SubPar
#        MACOSX_BUNDLE
#        MANUAL_FINALIZATION
#        ${PROJECT_SOURCES}
#        ${app_icon_resource})

    # The MACOSX_BUNDLE_ICON_FILE variable is added to the Info.plist
    # generated by CMake. This variable contains the .icns file name,
    # without the path.
    set(MACOSX_BUNDLE_ICON_FILE subpar.icns)

    # And the following tells CMake where to find and install the file itself.
    set(app_icon_macos "${CMAKE_CURRENT_SOURCE_DIR}/resources/subpar.icns")
    set_source_files_properties(${app_icon_macos} PROPERTIES MACOSX_PACKAGE_LOCATION "Resources")

    qt_add_executable(SubPar MACOSX_BUNDLE ${PROJECT_SOURCES} ${app_icon_macos})
else()
    qt_add_executable(SubPar ${PROJECT_SOURCES})
endif()


if(${QT_VERSION_MAJOR} GREATER_EQUAL 6)


#################
# Define target properties for Android with Qt 6 as:
#    set_property(TARGET SubPar APPEND PROPERTY QT_ANDROID_PACKAGE_SOURCE_DIR
#                 ${CMAKE_CURRENT_SOURCE_DIR}/android)
# For more information, see https://doc.qt.io/qt-6/qt-add-executable.html#target-creation

#    qt_create_translation(QM_FILES ${CMAKE_SOURCE_DIR} ${TS_FILES})
else()
    if(ANDROID)
        add_library(SubPar SHARED
            ${PROJECT_SOURCES}
        )
# Define properties for Android with Qt 5 after find_package() calls as:
#    set(ANDROID_PACKAGE_SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/android")
    else()
        add_executable(SubPar
            ${PROJECT_SOURCES}
        )
    endif()

    qt5_create_translation(QM_FILES ${CMAKE_SOURCE_DIR} ${TS_FILES})
endif()

target_link_libraries(SubPar PRIVATE Qt${QT_VERSION_MAJOR}::Widgets Qt${QT_VERSION_MAJOR}::Network)

set_target_properties(SubPar PROPERTIES
    MACOSX_BUNDLE_GUI_IDENTIFIER subpar.arcanespire.com
    MACOSX_BUNDLE_BUNDLE_VERSION ${PROJECT_VERSION}
    MACOSX_BUNDLE_SHORT_VERSION_STRING ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}
    MACOSX_BUNDLE TRUE
    WIN32_EXECUTABLE TRUE
)

install(TARGETS SubPar
    BUNDLE DESTINATION .
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR})

if(QT_VERSION_MAJOR EQUAL 6)
    qt_finalize_executable(SubPar)
endif()
